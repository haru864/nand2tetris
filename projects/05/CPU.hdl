// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Get writeM
    And(a=instruction[15], b=instruction[0], out=writeM);

    // store and load A register?
    And(a=instruction[15], b=instruction[2], out=loadFlagA);
    Mux16(a=outALU, b=instruction, sel=loadFlagA, out=tempOut01);
    Register(in=tempOut01, load=instruction[15], out=registerOutA);

    // load M or A?
    Mux16(a=registerOutA, b=inM, sel=instruction[12], out=outAorM);

    // load D register?
    And(a=instruction[15], b=instruction[1], out=loadFlagD);
    Register(in=outALU, load=loadFlagD, out=registerOutD);

    // calculate
    ALU(x=registerOutD, y=registerOutA, 
    zx=instruction[11], zx=instruction[10], zx=instruction[9], zx=instruction[8], 
    out=outALU, zr=isOutMZero, ng=isOutMNegative);
    And16(a=outALU, b=true, out=outM);

    // PC - jump or increment?
    And(a=false, b=false, out=NoJump);

    Not(in=isOutMZero, out=isOutMZero-N);
    Not(in=isOutMNegative, out=isOutMNegative-N);
    And(a=isOutMZero-N, b=isOutMNegative-N, out=isJGT);

    And(a=true, b=isOutMZero, out=isJEQ);

    And(a=true, b=isOutMNegative-N, out=isJGE);

    And(a=true, b=isOutMNegative, out=isJLT);

    And(a=true, b=isOutMZero-N, out=isJNE);

    Or(a=isOutMZero, b=isOutMNegative, out=isJLE);

    And(a=true, b=true, out=isJMP);

    Mux8Way(a=NoJump, b=isJGT, c=isJEQ, d=isJGE, e=isJLT, f=isJNE, g=isJLE, h=isJMP, sel=instruction[0..2], out=pcLoad);
    PC(in=registerOutA, reset=reset, load=pcLoad, out=pc);
}